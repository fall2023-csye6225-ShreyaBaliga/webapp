name: AMI_PACKER BUILD

on:
  pull_request:
    types:
      - closed
    branches:
        - main

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: AMI_PACKER BUILD
    
    services:
        postgres:
          image: postgres:latest
          env:
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
            POSTGRES_DB: ${{ secrets.DB_DATABASE }}
            POSTGRES_USER: ${{ secrets.DB_USER }}
            POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
            POSTGRES_PORT: ${{ secrets.DB_PORT }}
            POSTGRES_HOST: ${{ secrets.DB_HOST }}
            SNS_TOPIC: $${{ secrets.SNS_TOPIC }}
          ports:
            - 5432:5432
          options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'

    - name: Install dependencies
      run: npm install

    - name: Create .env file
      run: |
        touch .env
        echo DATABASE_URL: ${{ secrets.DATABASE_URL }} >> .env
        echo DB_DATABASE=${{ secrets.DB_DATABASE }} >> .env
        echo DB_USER=${{ secrets.DB_USER }} >> .env
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
        echo DB_PORT=${{ secrets.DB_PORT }} >> .env
        echo DB_HOST=${{ secrets.DB_HOST }} >> .env
        echo SNS_TOPIC=$${{ secrets.SNS_TOPIC }} >> .env

    - name: Run Integration tests
      run: npm run test

    - name: Build Artifacts
      run: |
        cd ../ && zip -r webapp.zip webapp
        cd - && cp ../webapp.zip .

    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: "latest"

    - name: AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Packer Initialization
      id: init
      run: |
        packer init aws-ubuntu.pkr.hcl

    - name: AMI_PACKER BUILD
      run: |
        packer build --var-file=variables.pkrvars.hcl aws-ubuntu.pkr.hcl 
    

    - name: Set AWS Demo credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
         aws-region: us-east-1


    - name: Copying ami Artifacts and Launching Template
      working-directory: ../webapp
      run: |

          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo $AMI_ID
          LT_ID=$(aws ec2 describe-launch-templates --launch-template-name app_server | jq '.LaunchTemplates[].LaunchTemplateId')
          LT_ID="${LT_ID%\"}"
          LT_ID="${LT_ID#\"}"
          echo $LT_ID
          aws ec2 create-launch-template-version --launch-template-id $LT_ID --version-description WebVersion2 --source-version 1 --launch-template-data "ImageId=$AMI_ID"
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name asg_launch_config --launch-template LaunchTemplateId=$LT_ID,Version='$Latest'
      env:
        AWS_ACCESS_KEY_ID_DEMO: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
        AWS_SECRET_ACCESS_KEY_DEMO: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}

    
    - name: Refreshing Instances
      run: aws autoscaling start-instance-refresh --auto-scaling-group-name asg_launch_config
      env:
        AWS_ACCESS_KEY_ID_DEMO: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
        AWS_SECRET_ACCESS_KEY_DEMO: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}

    # - name: Set AWS Demo credentials
    #   id: demo_credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
    #      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
    #      aws-region: us-east-1
    
    # - name: Display AWS Demo credentials
    #   run: |
    #       echo "AWS_ACCESS_KEY_ID_DEMO=${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}"
    #       echo "AWS_SECRET_ACCESS_KEY_DEMO=${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}"
    #       echo "AWS_REGION=us-east-1"

    # - name: Copying ami Artifacts and Launching Template
    #   working-directory: ../webapp
    #   run: |
    #       AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
    #       echo $AMI_ID
    #       LT_ID=$(aws ec2 describe-launch-templates --launch-template-name app_server --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
    #       echo $LT_ID
    #       aws ec2 create-launch-template-version --launch-template-id $LT_ID --version-description WebVersion2 --source-version 1 --launch-template-data "ImageId=$AMI_ID"
    #       aws autoscaling update-auto-scaling-group --auto-scaling-group-name asg_launch_config --launch-template LaunchTemplateId=$LT_ID,Version='$Latest'
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ steps.demo_credentials.outputs.aws_access_key_id }}
    #     AWS_SECRET_ACCESS_KEY: ${{ steps.demo_credentials.outputs.aws_secret_access_key }}

    # - name: Refreshing Instances
    #   run: aws autoscaling start-instance-refresh --auto-scaling-group-name asg_launch_config
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ steps.demo_credentials.outputs.aws_access_key_id }}
    #     AWS_SECRET_ACCESS_KEY: ${{ steps.demo_credentials.outputs.aws_secret_access_key }}

  
